USING GIT FOR COLLABORATION
 Suppose that Alice has started a new project with a Git repository in
       /home/alice/project, and that Bob, who has a home directory on the same
       machine, wants to contribute

bob$ git clone /home/alice/project myrepo #reates a new directory "myrepo" containing a clone of Alice's repository      						
(edit files)
bob$ git commit -a -m "bob_master commit"

alice$ cd /home/alice/project
alice$ git pull /home/bob/myrepo master #merges the changes from Bob's "master" branch into Alice's current branch
						
alice$ git fetch /home/bob/myrepo master #Alice can peek at what Bob did without merging first
alice$ git log -p HEAD..FETCH_HEAD #allows Alice to inspect what Bob did, using "FETCH_HEAD"
      									 
$ gitk HEAD..FETCH_HEAD #If Alice wants to visualize what Bob did since their histories forked
$ gitk HEAD...FETCH_HEAD #Alice may want to view what both of them did since they forked

alice$ git remote add bob /home/bob/myrepo #By defining remote repository shorthand, you can make it easier
alice$ git fetch bob

alice$ git log -p master..bob/master #when Alice fetches from Bob using a remote repository shorthand set up with git remote
alice$ git merge bob/master #Alice could merge the changes into her master branch

alice$ git pull . remotes/bob/master #This merge can also be done by pulling from her own remote-tracking branch

bob$ git pull #Later, Bob can update his repo with Alice's latest changes

bob$ git clone alice.org:/home/alice/project myrepo #If Bob later decides to work from a different host, he can still perform clones and pulls using the ssh protocol



